Index: src/main/java/com/siwoo/springpro/jdbc/config/EmbeddedJdbcConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/siwoo/springpro/jdbc/config/EmbeddedJdbcConfig.java	(revision c5c668242c2c31f83580b498e3e573c4ecc12c06)
+++ src/main/java/com/siwoo/springpro/jdbc/config/EmbeddedJdbcConfig.java	(date 1519501536289)
@@ -1,8 +1,12 @@
 package com.siwoo.springpro.jdbc.config;
 
+import com.siwoo.springpro.jdbc.repository.JdbcSingerRepository;
+import com.siwoo.springpro.jdbc.repository.SingerRepository;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
 import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
 import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
 
@@ -27,4 +31,24 @@
             return null;
         }
     }
+
+    @Bean
+    SingerRepository singerRepository(){
+        JdbcSingerRepository singerRepository = new JdbcSingerRepository();
+        return singerRepository;
+    }
+
+    @Bean
+    NamedParameterJdbcTemplate jdbcTemplate(){
+        NamedParameterJdbcTemplate jdbcTemplate = new NamedParameterJdbcTemplate(dataSource());
+        return jdbcTemplate;
+    }
+
+    /*@Bean
+    JdbcTemplate jdbcTemplate(){
+        JdbcTemplate jdbcTemplate = new JdbcTemplate();
+        jdbcTemplate.setDataSource(dataSource());
+        return jdbcTemplate;
+    }
+    */
 }
Index: src/main/java/com/siwoo/springpro/jdbc/exception/MySqlErrorCodesTranslator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/siwoo/springpro/jdbc/exception/MySqlErrorCodesTranslator.java	(date 1519499355823)
+++ src/main/java/com/siwoo/springpro/jdbc/exception/MySqlErrorCodesTranslator.java	(date 1519499355823)
@@ -0,0 +1,18 @@
+package com.siwoo.springpro.jdbc.exception;
+
+import org.springframework.dao.DataAccessException;
+import org.springframework.dao.DeadlockLoserDataAccessException;
+import org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator;
+
+import java.sql.SQLException;
+
+public class MySqlErrorCodesTranslator extends SQLErrorCodeSQLExceptionTranslator {
+
+    @Override
+    protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx) {
+        if(sqlEx.getErrorCode() == -12345){
+            return new DeadlockLoserDataAccessException(task,sqlEx);
+        }
+        return null;
+    }
+}
Index: src/main/java/com/siwoo/springpro/jdbc/repository/JdbcSingerRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/siwoo/springpro/jdbc/repository/JdbcSingerRepository.java	(date 1519503158241)
+++ src/main/java/com/siwoo/springpro/jdbc/repository/JdbcSingerRepository.java	(date 1519503158241)
@@ -0,0 +1,144 @@
+package com.siwoo.springpro.jdbc.repository;
+
+import com.siwoo.springpro.jdbc.domain.Album;
+import com.siwoo.springpro.jdbc.domain.Singer;
+import com.siwoo.springpro.jdbc.exception.MySqlErrorCodesTranslator;
+import lombok.Setter;
+import org.springframework.beans.factory.BeanCreationException;
+import org.springframework.beans.factory.InitializingBean;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.ResultSetExtractor;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
+import sun.reflect.generics.reflectiveObjects.NotImplementedException;
+
+import javax.sql.DataSource;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class JdbcSingerRepository implements SingerRepository, InitializingBean {
+    /*
+        @Autowired private JdbcTemplate jdbcTemplate;
+        private static final String FINDNAME_BY_ID_SQL = "select first_name || ' ' || last_name from singer where id = ?";
+    */
+    @Autowired NamedParameterJdbcTemplate jdbcTemplate;
+
+
+    /*init method*/
+    @Override
+    public void afterPropertiesSet() throws Exception {
+        if(jdbcTemplate == null)
+            throw new BeanCreationException("Null JdbcTemplate on JdbcSingerRepository");
+    }
+
+    private static RowMapper<Singer> singerMapper = (resultSet,rowNum)->{
+        Singer singer = new Singer();
+        singer.setId(resultSet.getLong("id"));;
+        singer.setFirstName(resultSet.getString("first_name"));
+        singer.setLastName(resultSet.getString("last_name"));
+        singer.setBirthDate(resultSet.getDate("birth_date"));
+        return singer;
+    };
+
+    private static final String FINDALL_SQL="select id, first_name, last_name, birth_date from singer";
+    @Override
+    public List<Singer> findAll() {
+        return jdbcTemplate.query(FINDALL_SQL,singerMapper);
+    }
+
+    private static final String FINDNAME_BY_ID_SQL = "select first_name || ' ' || last_name from singer where id = :singerId";
+    @Override
+    public String findNameById(Long id) {
+        /*return jdbcTemplate
+                .queryForObject(
+                        FINDNAME_BY_ID_SQL,
+                        new Object[]{id},
+                        String.class);*/
+        Map<String,Object> params = new HashMap<>();
+        params.put("singerId",id);
+        return jdbcTemplate.queryForObject(FINDNAME_BY_ID_SQL,params,String.class);
+    }
+
+    private static final String FINDALL_WITH_ALBUMS_SQL = "select s.id, s.first_name, s.last_name, s.birth_date" +
+            ", a.id as album_id, a.title, a.release_date from singer s " +
+            "left join album a on s.id = a.singer_id";
+    private static ResultSetExtractor<List<Singer>> singerWithAlbumExtractor = (resultSet) ->{
+          Map<Long,Singer> map = new HashMap<>();
+          Singer singer;
+          while (resultSet.next()){
+              Long id = resultSet.getLong("id");
+              singer = map.get(id);
+              /*if singer does not exists in map*/
+              if(singer == null){
+                  singer = new Singer();
+                  singer.setId(id);
+                  singer.setFirstName(resultSet.getString("first_name"));
+                  singer.setLastName(resultSet.getString("last_name"));
+                  singer.setBirthDate(resultSet.getDate("birth_date"));
+                  singer.setAlbums(new ArrayList<>());
+                  map.put(id,singer);
+              }
+              Long albumId = resultSet.getLong("album_id");
+              /*if album is exists*/
+              if(albumId > 0){
+                  Album album = new Album();
+                  album.setId(albumId);
+                  album.setSingerId(id);
+                  album.setTitle(resultSet.getString("title"));
+                  album.setReleaseDate(resultSet.getDate("release_date"));
+                  singer.addAlbum(album);
+              }
+          }
+          return new ArrayList<>(map.values());
+    };
+    @Override
+    public List<Singer> findAllWithAlbums(){
+        return jdbcTemplate.query(FINDALL_WITH_ALBUMS_SQL,singerWithAlbumExtractor);
+    }
+
+
+    @Override
+    public List<Singer> findByFirstName(String firstName) {
+        throw new UnsupportedOperationException("Unsupported method");
+    }
+
+
+    @Override
+    public String findLastNameById(Long id) {
+        throw new UnsupportedOperationException("Unsupported method");
+    }
+
+    @Override
+    public String findFirstNameById(Long id) {
+        throw new UnsupportedOperationException("Unsupported method");
+    }
+
+    @Override
+    public void insert(Singer singer) {
+        throw new UnsupportedOperationException("Unsupported method");
+    }
+
+    @Override
+    public void update(Singer singer) {
+        throw new UnsupportedOperationException("Unsupported method");
+    }
+
+    @Override
+    public void delete(Long singerId) {
+        throw new UnsupportedOperationException("Unsupported method");
+    }
+
+    @Override
+    public List<Singer> findAllWithDetail() {
+        throw new UnsupportedOperationException("Unsupported method");
+    }
+
+    @Override
+    public void insertWithDetail(Singer singer) {
+        throw new UnsupportedOperationException("Unsupported method");
+    }
+
+}
Index: src/main/java/com/siwoo/springpro/jdbc/repository/PlainSingerRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/siwoo/springpro/jdbc/repository/PlainSingerRepository.java	(revision c5c668242c2c31f83580b498e3e573c4ecc12c06)
+++ src/main/java/com/siwoo/springpro/jdbc/repository/PlainSingerRepository.java	(date 1519502210240)
@@ -57,19 +57,29 @@
         return result;
     }
 
+    @Override
+    public List<Singer> findAllWithAlbums() {
+        throw new UnsupportedOperationException("Unsupported method");
+    }
+
     @Override
     public List<Singer> findByFirstName(String firstName) {
-        return null;
+        throw new UnsupportedOperationException("Unsupported method");
+    }
+
+    @Override
+    public String findNameById(Long id) {
+        throw new UnsupportedOperationException("Unsupported method");
     }
 
     @Override
     public String findLastNameById(Long id) {
-        return null;
+        throw new UnsupportedOperationException("Unsupported method");
     }
 
     @Override
     public String findFirstNameById(Long id) {
-        return null;
+        throw new UnsupportedOperationException("Unsupported method");
     }
 
     @Override
@@ -97,7 +107,7 @@
 
     @Override
     public void update(Singer singer) {
-
+        throw new UnsupportedOperationException("Unsupported method");
     }
 
     @Override
@@ -118,11 +128,11 @@
 
     @Override
     public List<Singer> findAllWithDetail() {
-        return null;
+        throw new UnsupportedOperationException("Unsupported method");
     }
 
     @Override
     public void insertWithDetail(Singer singer) {
-
+        throw new UnsupportedOperationException("Unsupported method");
     }
 }
Index: src/main/java/com/siwoo/springpro/jdbc/repository/SingerRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/siwoo/springpro/jdbc/repository/SingerRepository.java	(revision c5c668242c2c31f83580b498e3e573c4ecc12c06)
+++ src/main/java/com/siwoo/springpro/jdbc/repository/SingerRepository.java	(date 1519502132190)
@@ -6,7 +6,11 @@
 
 public interface SingerRepository {
     List<Singer> findAll();
+
+    List<Singer> findAllWithAlbums();
+
     List<Singer> findByFirstName(String firstName);
+    String findNameById(Long id);
     String findLastNameById(Long id);
     String findFirstNameById(Long id);
     void insert(Singer singer);
Index: src/test/java/com/siwoo/springpro/jdbc/TestJdbcSingerRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/com/siwoo/springpro/jdbc/TestJdbcSingerRepository.java	(date 1519503536897)
+++ src/test/java/com/siwoo/springpro/jdbc/TestJdbcSingerRepository.java	(date 1519503536897)
@@ -0,0 +1,66 @@
+package com.siwoo.springpro.jdbc;
+
+import com.siwoo.springpro.jdbc.config.EmbeddedJdbcConfig;
+import com.siwoo.springpro.jdbc.domain.Album;
+import com.siwoo.springpro.jdbc.domain.Singer;
+import com.siwoo.springpro.jdbc.repository.SingerRepository;
+import lombok.extern.slf4j.Slf4j;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationContext;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import javax.sql.DataSource;
+import java.util.List;
+import java.util.function.Consumer;
+
+import static org.junit.Assert.*;
+
+@Slf4j
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(classes = EmbeddedJdbcConfig.class)
+public class TestJdbcSingerRepository {
+
+    @Autowired SingerRepository singerRepository;
+    @Autowired ApplicationContext context;
+
+    @Test
+    public void testH2DB(){
+        assertNotNull(context.getBean(DataSource.class));
+        testDao(singerRepository);
+    }
+
+    private void testDao(SingerRepository singerRepository) {
+        String singerName = singerRepository.findNameById(1l);
+        assertTrue("John Mayer".equals(singerName));
+        log.info(singerName);
+    }
+
+    private static final Consumer<Singer> checkSinger = singer ->  {
+        log.info(singer.toString());
+        if(singer.getAlbums() != null){
+            for(Album album : singer.getAlbums()){
+                log.info("---"+album);
+            }
+        }
+    };
+
+    @Test
+    public void testRowMapper(){
+        List<Singer> singers = singerRepository.findAll();
+        assertTrue(singers.size() == 3);
+
+        singers.forEach(checkSinger);
+    }
+
+    @Test
+    public void testFindAllWithAlbums(){
+        List<Singer> singers = singerRepository.findAllWithAlbums();
+        assertTrue(singers.size() == 3);
+
+        singers.forEach(checkSinger
+        );
+    }
+
+}
